Approach-1 Memoization

class Solution {
public:
    
    int dp[1001][1001];
    
    int solve(int i, int j, string s, string t){
        
        if(j < 0) return 1;
        
        if (i < 0) return 0;
        
        if (dp[i][j] != -1 ){
            return dp[i][j];
        }
        
        if (s[i] == t[j]){
            return dp[i][j] = solve(i-1, j-1, s, t) + solve(i-1, j, s, t);
        }
        
        return dp[i][j] = solve(i-1, j, s, t);
    }
    int numDistinct(string s, string t) {
        
        int n = s.size();
        int m = t.size();
        
        memset(dp, -1, sizeof(dp));
        
        return solve(n-1, m-1, s, t);
        
    }
};


Approach - 2 Tabulation

class Solution {
public:
    
    int dp[1001][1001];
    
    int solve(int i, int j, string s, string t){
        
        if(j < 0) return 1;
        
        if (i < 0) return 0;
        
        if (dp[i][j] != -1 ){
            return dp[i][j];
        }
        
        if (s[i] == t[j]){
            return dp[i][j] = solve(i-1, j-1, s, t) + solve(i-1, j, s, t);
        }
        
        return dp[i][j] = solve(i-1, j, s, t);
    }
    int numDistinct(string s, string t) {
        
        int n = s.size();
        int m = t.size();
        
        //tabulation 
        
        vector<vector<double>> dp(n+1, vector<double>(m+1, 0));
        
        //base cases
        
        
        //for everyvalue of j = 0 return 1
        for(int i=0; i<=n; i++) dp[i][0] = 1;

        
        //looping recurrance relations
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s[i-1] == t[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]; //searching all possibilities
                }
                
                else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return (int)dp[n][m]; //typecasted
    }
};


Approach - 3 Tabulation with space optimization with prev and cur

class Solution {
public:
    
    int dp[1001][1001];
    
    int solve(int i, int j, string s, string t){
        
        if(j < 0) return 1;
        
        if (i < 0) return 0;
        
        if (dp[i][j] != -1 ){
            return dp[i][j];
        }
        
        if (s[i] == t[j]){
            return dp[i][j] = solve(i-1, j-1, s, t) + solve(i-1, j, s, t);
        }
        
        return dp[i][j] = solve(i-1, j, s, t);
    }
    int numDistinct(string s, string t) {
        
        int n = s.size();
        int m = t.size();
        
        //tabulation 
        
        vector<vector<double>> dp(n+1, vector<double>(m+1, 0));
        
        //base cases
        
        
        //for everyvalue of j = 0 return 1
        for(int i=0; i<=n; i++) dp[i][0] = 1;

        
        //looping recurrance relations
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(s[i-1] == t[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]; //searching all possibilities
                }
                
                else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return (int)dp[n][m]; //typecasted
    }
};
